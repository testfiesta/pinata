name: Publish CI

on:
  release:
    types: [created]
  workflow_dispatch:

jobs:
  publish_on_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run: yarn install
    - name: Install OAuth server dependencies
      run: yarn install
      working-directory: ./server
    - name: Publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: npm run publish

  publish_on_x64_mac:
    runs-on: macos-13
    strategy:
      matrix:
        os: [macos-latest]
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run:  yarn install
    - name: Install OAuth server dependencies
      run: yarn install
      working-directory: ./server
    - name: Prep key for app notarization
      run: |
        mkdir -p ~/private_keys/
        echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
    - name: Publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_LINK: ${{ secrets.mac_csc_link }}
        CSC_KEY_PASSWORD: ${{ secrets.mac_csc_key_password }}
        APPLE_API_KEY: "~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8"
        APPLE_API_KEY_ID: ${{ secrets.api_key_id }}
        APPLE_API_KEY_ISSUER: ${{ secrets.api_key_issuer_id }}
      run: |
        npm run publish
    - if: ${{ failure() }}
      run: |
        echo "###########################################";
        echo "Printing logs from failure";
        echo "###########################################";
        echo "";
        echo "###########";
        cat notarization-error.log;
        echo "###########";

  publish_on_arm64_mac:
    runs-on: macos-latest 
    strategy:
      matrix:
        os: [macos-latest]
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run:  yarn install
    - name: Install OAuth server dependencies
      run: yarn install
      working-directory: ./server
    - name: Prep key for app notarization
      run: |
        mkdir -p ~/private_keys/
        echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8
    - name: Publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        CSC_LINK: ${{ secrets.mac_csc_link }}
        CSC_KEY_PASSWORD: ${{ secrets.mac_csc_key_password }}
        APPLE_API_KEY: "~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8"
        APPLE_API_KEY_ID: ${{ secrets.api_key_id }}
        APPLE_API_KEY_ISSUER: ${{ secrets.api_key_issuer_id }}
      run: |
        npm run publish
    - if: ${{ failure() }}
      run: |
        echo "###########################################";
        echo "Printing logs from failure";
        echo "###########################################";
        echo "";
        echo "###########";
        cat notarization-error.log;
        echo "###########";
      
  publish_on_win:
    runs-on: windows-latest
    strategy:
      matrix:
        os: [windows-latest]
        node-version: [16.x]
    steps:
    - uses: actions/checkout@v3  
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install dependencies
      run:  yarn install
    - name: Install OAuth server dependencies
      run: yarn install
      working-directory: ./server
    - name: Download and Unzip eSignerCKA Setup
      run: | 
        Invoke-WebRequest -OutFile CodeSignTool.zip "https://www.ssl.com/download/codesigntool-for-windows"
        Expand-Archive -Force CodeSignTool.zip
        Remove-Item CodeSignTool.zip
    - name: Publish
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        WINDOWS_SIGN_USER_NAME: ${{ secrets.WINDOWS_SIGN_USER_NAME }}
        WINDOWS_SIGN_USER_PASSWORD: ${{ secrets.WINDOWS_SIGN_USER_PASSWORD }}
        WINDOWS_SIGN_CREDENTIAL_ID: ${{ secrets.WINDOWS_SIGN_CREDENTIAL_ID }}
        WINDOWS_SIGN_USER_TOTP: ${{ secrets.WINDOWS_SIGN_USER_TOTP }}
      run: npm run publish

  notify:
    runs-on: ubuntu-latest
    steps:
      - name: Discord notification
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK_URL }}
        uses: Ilshidur/action-discord@0.3.2
            
